# =================================================
# هذا هو الكود الذي سنضعه في ملف main.py
# =================================================

from flask import Flask, request, jsonify
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import os
import re

# --- 1. تهيئة التطبيق ونموذج الذكاء الاصطناعي ---
app = Flask(__name__)

# تحميل النموذج (سيتم تحميله مرة واحدة عند بدء تشغيل الخادم)
print("جاري تحميل نموذج المتجهات...")
model = SentenceTransformer('distiluse-base-multilingual-cased-v1')
print("تم تحميل النموذج.")

# --- 2. قاعدة المعرفة ---
knowledge_base_text = """
بالتأكيد، سأقوم بإنشاء دليل مستخدم شامل ومفصل لتطبيق “شات زيوس”. هذا الدليل سيغطي كل جانب من جوانب الموقع، بدءًا من الفكرة الأساسية وصولاً إلى شرح كل زر ووظيفة، مع قسم للأسئلة والأجوبة لتوضيح أي استفسارات محتملة.


دليل المستخدم الشامل لتطبيق شات زيوس (Zeus Chat)
مرحباً بك في دليل المستخدم لتطبيق “شات زيوس”، بوابتك للتواصل مع نماذج الذكاء الاصطناعي المتقدمة. هذا الدليل مصمم لمساعدتك على فهم واستغلال كل ميزات التطبيق بسهولة وفعالية.


جدول المحتويات
        1.      مقدمة: ما هو شات زيوس؟
        ◦       الهدف من التطبيق
        ◦       الميزات الرئيسية
        2.      البدء السريع
        ◦       فتح التطبيق لأول مرة
        ◦       إجراء أول محادثة
        3.      شرح واجهة المستخدم
        ◦       الشاشة الرئيسية (Welcome Screen)
        ◦       الشريط العلوي (Header)
        ◦       منطقة الدردشة (Chat Area)
        ◦       صندوق إدخال الرسائل (Message Input)
        ◦       الشريط الجانبي (Sidebar)
        4.      إدارة المحادثات
        ◦       بدء محادثة جديدة
        ◦       التنقل بين المحادثات
        ◦       إعادة تسمية المحادثة
        ◦       حذف المحادثة
        5.      نافذة الإعدادات (Settings Modal): تخصيص تجربتك
        ◦       فتح الإعدادات
        ◦       شرح تفصيلي لكل إعداد:
        ◦       مزود الذكاء الاصطناعي (AI Provider)
        ◦       إدارة مفاتيح API (API Keys)
        ◦       استراتيجية تبديل المفاتيح (Key Switching Strategy)
        ◦       تخصيص شخصية الذكاء الاصطناعي (Custom Prompt)
        ◦       نموذج الذكاء الاصطناعي (AI Model)
        ◦       درجة الحرارة (Temperature)
        ◦       حفظ الإعدادات
        6.      التفاعل مع الرسائل
        ◦       نسخ نص الرسالة
        ◦       نسخ الأكواد البرمجية
        7.      قسم الأسئلة الشائعة (FAQ)
        8.      نصائح وحيل متقدمة


1. مقدمة: ما هو شات زيوس؟
شات زيوس هو واجهة ويب متقدمة ومفتوحة المصدر تتيح لك التفاعل مع نماذج لغوية كبيرة (LLMs) من مزودين مختلفين مثل Google (Gemini) و OpenRouter. تم تصميمه ليكون سريعًا، قابلاً للتخصيص، ويحافظ على خصوصيتك عبر تخزين جميع بياناتك (المحادثات والإعدادات) محليًا في متصفحك فقط.

الهدف من التطبيق
        •       توفير واجهة موحدة: استخدام نماذج ذكاء اصطناعي متعددة من مكان واحد.
        •       التحكم الكامل: منح المستخدمين القدرة على استخدام مفاتيح API الخاصة بهم وتخصيص سلوك النموذج.
        •       الخصوصية: ضمان عدم تخزين أي محادثات على خوادم خارجية. كل شيء يبقى على جهازك.
        •       المرونة: دعم مزودين متعددين واستراتيجيات مختلفة للتعامل مع المفاتيح لضمان استمرارية الخدمة.

الميزات الرئيسية
        •       دعم متعدد للمزودين: اختر بين Google Gemini و OpenRouter.
        •       إدارة مرنة لمفاتيح API: أضف مفاتيح متعددة واستخدمها بشكل تسلسلي أو دائري.
        •       تخصيص متقدم: عدّل شخصية الذكاء الاصطناعي، ونموذج اللغة، ودرجة الحرارة.
        •       تخزين محلي: جميع المحادثات والإعدادات محفوظة في متصفحك.
        •       واجهة عصرية: تصميم زجاجي (Glass Effect) مع دعم للوضع المظلم.
        •       عرض الأكواد: تمييز الأكواد البرمجية (Syntax Highlighting) مع زر لنسخها بسهولة.
        •       إدارة المحادثات: حفظ سجل المحادثات مع إمكانية إعادة التسمية والحذف.


2. البدء السريع
فتح التطبيق لأول مرة
عند فتح التطبيق لأول مرة، ستستقبلك الشاشة الرئيسية التي تعرض شعار زيوس وبعض الاقتراحات لبدء محادثة.

إجراء أول محادثة
        1.      اكتب سؤالك: في الأسفل، ستجد صندوقًا بعنوان “اكتب رسالتك هنا…”. اكتب سؤالك أو طلبك.
        2.      أرسل رسالتك: اضغط على زر الإرسال (أيقونة الطائرة الورقية) أو اضغط على مفتاح `Enter`.
        3.      انتظر الرد: سترى مؤشر “جاري الكتابة…” ثم يظهر رد الذكاء الاصطناعي.

ملاحظة هامة: قبل إرسال أول رسالة، سيطلب منك التطبيق غالبًا إدخال مفتاح API في الإعدادات. هذه خطوة ضرورية ليعمل التطبيق.


3. شرح واجهة المستخدم
الشاشة الرئيسية (Welcome Screen)
تظهر عند عدم وجود محادثة نشطة.

        •       شعار زيوس: يمثل هوية التطبيق.
        •       رسالة ترحيب: “مرحباً بك في شات زيوس المحسّن”.
        •       أزرار الاقتراحات: 4 أزرار تحتوي على أسئلة مقترحة مثل “اشرح الفيزياء الكمية”. الضغط على أي منها يرسل السؤال مباشرة إلى الذكاء الاصطناعي.

الشريط العلوي (Header)
        •       أيقونة القائمة (Bars ): تفتح الشريط الجانبي الذي يعرض سجل محادثاتك.
        •       شعار واسم التطبيق: “شات زيوس - إله الرعد”.
        •       أيقونة الوضع المظلم (Moon/Sun  / ): للتبديل بين الوضع الفاتح والمظلم.
        •       أيقونة الإعدادات (Cog ): تفتح نافذة الإعدادات لتخصيص تجربتك.
        •       زر محادثة جديدة: لبدء محادثة فارغة جديدة.

منطقة الدردشة (Chat Area)
هنا تظهر رسائلك ورسائل الذكاء الاصطناعي.

        •       رسائل المستخدم: تظهر على اليسار بخلفية رمادية داكنة.
        •       رسائل المساعد (AI): تظهر على اليمين بخلفية شفافة.

صندوق إدخال الرسائل (Message Input)
يقع في أسفل الشاشة.

        •       صندوق النص (Textarea): المكان الذي تكتب فيه رسائلك. يتوسع تلقائيًا مع زيادة النص.
        •       زر الإرسال (Send Button ): لإرسال رسالتك. يتم تفعيله فقط عند وجود نص في الصندوق.

الشريط الجانبي (Sidebar)
يحتوي على سجل محادثاتك.

        •       زر محادثة جديدة: لبدء محادثة جديدة.
        •       قائمة المحادثات: يعرض كل محادثاتك السابقة، مرتبة من الأحدث إلى الأقدم.
        •       أزرار التحكم في المحادثة: بجانب كل محادثة يوجد زر لتعديل الاسم () وزر للحذف ().


4. إدارة المحادثات
بدء محادثة جديدة
يمكنك بدء محادثة جديدة بالضغط على زر “محادثة جديدة” في الشريط العلوي أو الشريط الجانبي. سيؤدي هذا إلى مسح الشاشة والعودة إلى شاشة الترحيب، استعدادًا لموضوع جديد.

التنقل بين المحادثات
        1.      افتح الشريط الجانبي ().
        2.      اضغط على اسم المحادثة التي تريد عرضها.
        3.      سيتم تحميل سجل الرسائل الخاص بها في منطقة الدردشة.

إعادة تسمية المحادثة
بشكل افتراضي، يتم تسمية المحادثة بأول 30 حرفًا من رسالتك الأولى. لتغيير الاسم:

        1.      افتح الشريط الجانبي.
        2.      بجانب اسم المحادثة، اضغط على أيقونة التعديل ().
        3.      أدخل الاسم الجديد في النافذة المنبثقة واضغط “موافق”.

حذف المحادثة
        1.      افتح الشريط الجانبي.
        2.      بجانب اسم المحادثة، اضغط على أيقونة الحذف ().
        3.      ستظهر رسالة تأكيد. اضغط “موافق” لحذف المحادثة نهائيًا.


5. نافذة الإعدادات (Settings Modal): تخصيص تجربتك
هذا هو مركز التحكم في التطبيق. اضغط على أيقونة الترس () لفتحها.

شرح تفصيلي لكل إعداد:
        •       مزود الذكاء الاصطناعي (AI Provider):
        ◦       الوظيفة: يتيح لك الاختيار بين مصادر نماذج الذكاء الاصطناعي.
        ◦       الخيارات:
        ◦       `Google Gemini`: لاستخدام نماذج جوجل مباشرة.
        ◦       `OpenRouter`: خدمة تتيح الوصول إلى مجموعة واسعة من النماذج (بما في ذلك نماذج مجانية).
        ◦       متى تستخدمه: غيّر هذا الخيار إذا كنت تفضل نماذج مزود معين أو إذا كانت مفاتيحك تعمل مع مزود واحد فقط.
        •       إدارة مفاتيح API (API Keys):
        ◦       الوظيفة: هذا هو أهم قسم. يجب عليك إدخال مفتاح API واحد على الأقل ليعمل التطبيق. مفتاح API هو بمثابة كلمة مرور تسمح للتطبيق باستخدام خدمة الذكاء الاصطناعي نيابة عنك.
        ◦       كيفية الاستخدام:
        1.      اختر المزود أولاً (Gemini أو OpenRouter).
        2.      اضغط على “أضف مفتاحًا جديدًا”.
        3.      الصق مفتاحك في الحقل. يمكنك الحصول على مفاتيح مجانية من Google AI Studio أو OpenRouter.
        4.      يمكنك إضافة عدة مفاتيح.
        •       استراتيجية تبديل المفاتيح (Key Switching Strategy):
        ◦       الوظيفة: تحدد كيفية استخدام التطبيق لمفاتيحك المتعددة في حالة فشل أحدها (مثل انتهاء الحصة).
        ◦       الخيارات:
        ◦       `تبديل تسلسلي (Sequential)`: يجرب المفتاح الأول، إذا فشل يجرب الثاني، وهكذا.
        ◦       `تبديل دائري (Round Robin)`: (هذه الميزة قد تكون نظرية في الكود الحالي) يستخدم المفاتيح بالتناوب لتوزيع الحمل.
        ◦       نصيحة: اتركها على “تسلسلي” لمعظم الحالات.
        •       تخصيص شخصية الذكاء الاصطناعي (Custom Prompt):
        ◦       الوظيفة: يسمح لك بتحديد “شخصية” أو “تعليمات أساسية” للذكاء الاصطناعي. هذا النص يتم إرساله بشكل خفي في بداية كل محادثة جديدة.
        ◦       مثال: إذا كتبت “أنت مساعد خبير في البرمجة بلغة Python. يجب أن تكون إجاباتك دقيقة ومرفقة بأمثلة عملية.”، فإن الذكاء الاصطناعي سيلتزم بهذه الشخصية في كل ردوده.
        •       نموذج الذكاء الاصطناعي (AI Model):
        ◦       الوظيفة: يتيح لك اختيار “عقل” الذكاء الاصطناعي. النماذج المختلفة لها نقاط قوة وضعف مختلفة (بعضها أسرع، وبعضها أذكى، وبعضها أفضل في البرمجة).
        ◦       كيفية الاستخدام: القائمة تتغير تلقائيًا بناءً على المزود الذي اخترته. اختر النموذج الذي يناسب احتياجاتك. (مثال: `gemini-1.5-flash` سريع واقتصادي، بينما `gemini-1.5-pro` أكثر قوة).
        •       درجة الحرارة (Temperature):
        ◦       الوظيفة: تتحكم في مدى “إبداع” أو “عشوائية” الردود.
        ◦       القيم:
        ◦       `0.0 - 0.3`: ردود دقيقة ومباشرة (جيد للأسئلة الواقعية والبرمجة).
        ◦       `0.7 - 1.0`: ردود أكثر إبداعًا وتنوعًا (جيد لكتابة القصص أو العصف الذهني).
        ◦       نصيحة: القيمة الافتراضية `0.7` هي توازن جيد.

حفظ الإعدادات
بعد إجراء التغييرات، اضغط دائمًا على زر “حفظ” لتطبيقها.


6. التفاعل مع الرسائل
        •       نسخ نص الرسالة: أسفل كل رسالة (سواء منك أو من الذكاء الاصطناعي)، يوجد زر ” نسخ”. اضغط عليه لنسخ محتوى الرسالة بالكامل إلى الحافظة.
        •       نسخ الأكواد البرمجية: إذا كانت إجابة الذكاء الاصطناعي تحتوي على كتلة كود، ستجد في الزاوية العلوية اليمنى من الكتلة زر ” نسخ” مخصص لنسخ الكود فقط، مما يسهل لصقه في محرر الأكواد الخاص بك.


7. قسم الأسئلة الشائعة (FAQ)
        •       س: أين يتم تخزين محادثاتي؟ هل هي آمنة؟
        ◦       ج: نعم، آمنة. يتم تخزين جميع محادثاتك وإعداداتك ومفاتيح API الخاصة بك في `localStorage` الخاص بمتصفحك على جهازك فقط. لا يتم إرسال أي شيء إلى أي خادم خارجي باستثناء طلبات API المباشرة إلى Google أو OpenRouter.
        •       س: التطبيق لا يعمل، ماذا أفعل؟
        ◦       ج: تحقق من الخطوات التالية:
        1.      تأكد من أنك قمت بإدخال مفتاح API صحيح وفعال في الإعدادات.
        2.      تأكد من أن المزود الذي اخترته في الإعدادات يطابق نوع المفتاح الذي أدخلته.
        3.      جرب تحديث الصفحة أو مسح ذاكرة التخزين المؤقت للمتصفح.
        •       س: ما هو الفرق بين Gemini و OpenRouter؟
        ◦       ج: Gemini هو منتج مباشر من Google. OpenRouter هي منصة وسيطة تتيح لك الوصول إلى نماذج من شركات متعددة (Google, Meta, Microsoft, وغيرها)، وغالبًا ما توفر طبقة مجانية سخية لبعض النماذج.
        •       س: لماذا أحتاج إلى عدة مفاتيح API؟
        ◦       ج: المفاتيح المجانية غالبًا ما يكون لها حد استخدام يومي أو دقيقي. إذا كان لديك عدة مفاتيح، يمكن للتطبيق التبديل تلقائيًا إلى مفتاح آخر عند استنفاد حصة المفتاح الحالي، مما يضمن عدم انقطاع الخدمة.


8. نصائح وحيل متقدمة
        •       استخدم البرومبت المخصص بذكاء: يمكنك إنشاء شخصيات مختلفة عن طريق تغيير البرومبت المخصص وبدء محادثة جديدة. مثلاً، شخصية “مترجم فوري” أو “مدقق لغوي”.
        •       جرّب نماذج مختلفة: لا تتردد في التبديل بين النماذج المختلفة في الإعدادات لترى أيها يعطي أفضل النتائج لمهمتك الحالية.
        •       التحكم في الإبداع: إذا كنت تريد إجابة واقعية ومحددة، قلل درجة الحرارة إلى `0.2`. إذا كنت تريد أفكارًا جديدة، ارفعها إلى `0.9`.
        •       مفتاح `Shift + Enter`: أثناء كتابة رسالة، استخدم `Shift + Enter` لإضافة سطر جديد دون إرسال الرسالة.
"""

# === دالة تقسيم النص المحسنة ===
def split_into_semantic_chunks(text):
    raw_chunks = re.split(r'(?=\n[1-9]\.\s|\n\s{4,8}•\s|\n\s{8,12}◦\s)', text)
    chunks = []
    current_chunk = ""
    for part in raw_chunks:
        if re.match(r'^\n([1-9]\.\s|\s{4,8}•\s|\s{8,12}◦\s)', part) and current_chunk:
            chunks.append(current_chunk.strip())
            current_chunk = part
        else:
            current_chunk += part
    if current_chunk:
        chunks.append(current_chunk.strip())
    chunks = [chunk for chunk in chunks if len(chunk) > 50]
    return chunks

chunks = split_into_semantic_chunks(knowledge_base_text)

# تحويل قاعدة المعرفة إلى متجهات (يتم مرة واحدة عند بدء التشغيل)
print("جاري تحويل قاعدة المعرفة إلى متجهات...")
knowledge_vectors = model.encode(chunks)
print("تم التحويل. الخادم جاهز الآن.")

# --- 3. دالة البحث ---
def find_relevant_knowledge(user_question, top_k=3):
    question_vector = model.encode([user_question])
    similarities = cosine_similarity(question_vector, knowledge_vectors)[0]
    top_indices = np.argsort(similarities)[-top_k:][::-1]
    relevant_context = "\n".join([chunks[i] for i in top_indices])
    return relevant_context

# --- 4. نقطة النهاية (Endpoint) التي سيتحدث معها تطبيقك ---
@app.route('/find_context', methods=['POST'])
def find_context_endpoint():
    data = request.get_json()
    if not data or 'question' not in data:
        return jsonify({'error': 'الرجاء إرسال سؤال'}), 400

    user_question = data['question']
    context = find_relevant_knowledge(user_question)

    return jsonify({'context': context})

# --- 5. تشغيل الخادم ---
# (هذا الجزء لتشغيل الخادم محليًا، Render سيتعامل معه بطريقته الخاصة)
if __name__ == '__main__':
    # Render يستخدم خادم ويب مثل Gunicorn، لذلك لن يتم استدعاء هذا السطر هناك
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8081)))
